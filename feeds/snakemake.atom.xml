<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Charlie Pauvert webpages - Snakemake</title><link href="https://cpauvert.github.io/" rel="alternate"></link><link href="https://cpauvert.github.io/feeds/snakemake.atom.xml" rel="self"></link><id>https://cpauvert.github.io/</id><updated>2020-10-09T10:39:00+02:00</updated><entry><title>LEGOlize DADA2: getting DADA2 into Snakemake</title><link href="https://cpauvert.github.io/legolize-dada2.html" rel="alternate"></link><published>2020-10-08T12:27:00+02:00</published><updated>2020-10-09T10:39:00+02:00</updated><author><name>Charlie Pauvert</name></author><id>tag:cpauvert.github.io,2020-10-08:/legolize-dada2.html</id><summary type="html">&lt;p&gt;A (WIP) contribution project to rely on the modularity of Snakemake wrappers to propose a flexible pipeline for processing metabarcoding data.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I finally have the time to properly use the workflow management &lt;a href="https://github.com/snakemake/snakemake"&gt;Snakemake&lt;/a&gt; which is great because so many recent developments happened since I&amp;rsquo;ve heard of this tool during my master degree. The authors and contributors of Snakemake actually published recently a &lt;a href="https://doi.org/10.5281/zenodo.4067137"&gt;preprint&lt;/a&gt; highlighting such features.&lt;/p&gt;
&lt;p&gt;Among these features, one could be compared to LEGO&amp;reg; bricks: Snakemake &lt;em&gt;wrappers&lt;/em&gt;.  They are dedicated Snakemake rule that allow to plug &amp;ndash; much like bricks &amp;ndash; common tools to perform your analysis. These wrappers should pass automatic tests prior to their integration in the repository which safeguard against typos during development that hinders your workflow.&lt;/p&gt;
&lt;p&gt;Bricks can even be assembled in dedicated sets, which in the case of Snakemake means that wrappers can be combined to design &lt;em&gt;meta-wrapper&lt;/em&gt; where a common analysis workflow can be crafted using a selection of wrappers. This convenient idea enables the user to finely tune the level of modularity wished during the design of its Snakemake workflow: from custom rules, wrappers to meta-wrappers&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Snakemake use is rising and there was even recently a &lt;a href="https://doi.org/10.1101/2020.05.17.095679"&gt;preprint&lt;/a&gt; for a &lt;a href="https://benjjneb.github.io/dada2/"&gt;DADA2&lt;/a&gt; workflow with Snakemake. I was really excited for this huge contribution that, in my opinion, filled a gap. However, I realized that some steps were not parts of my personal workflow (such as the taxonomy) and that instead of this one well running Snakemake workflow &amp;ndash; huge LEGO set &amp;ndash;, I&amp;rsquo;d rather choose from several DADA2 wrappers &amp;ndash; piles of bricks &amp;ndash; to build a more flexible workflow.&lt;/p&gt;
&lt;p&gt;It all started when I realised that there were no DADA2 wrappers and even few metabarcoding related wrappers proposed in the repository.&lt;br&gt;
Last week, I then started writing my first wrappers by mimicking previous R wrappers listed in the &lt;a href="https://snakemake-wrappers.readthedocs.io/en/stable/index.html"&gt;repository&lt;/a&gt;. I tried to design toy examples to test the wrappers and I even manage to propose a few pull requests on the &lt;a href="https://github.com/snakemake/snakemake-wrappers/pulls"&gt;Github repository&lt;/a&gt;. However, I realize after going over the corrections proposed by the reviewer that I needed to carefully think ahead my wrapper and their articulations. Indeed, I first proposed wrappers using paired-end reads only which is not truly flexible. Hence some of my wrappers contained duplicated lines of code to cope with the orientation which violates the &lt;em&gt;don&amp;rsquo;t repeat yourself&lt;/em&gt; &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;rule&lt;/a&gt;.
Even worse, it sometimes adds complexity to steps that could be processed unbeknownst of the reads orientation. &lt;/p&gt;
&lt;p&gt;Therefore, I put my pull request on a draft status and will go back to writing properly. I already put on paper the dependency of wrappers to read orientation in order to optimize this workflow. I hope to propose soon these DADA2 wrappers and eventually a DADA2 meta-wrappers as well.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Check the &lt;a href="https://snakemake.readthedocs.io/en/stable/snakefiles/modularization.html"&gt;documentation&lt;/a&gt; for more details on modularisation with Snakemake.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Snakemake"></category></entry></feed>