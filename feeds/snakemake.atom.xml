<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Charlie Pauvert webpages - Snakemake</title><link href="https://cpauvert.github.io/" rel="alternate"></link><link href="https://cpauvert.github.io/feeds/snakemake.atom.xml" rel="self"></link><id>https://cpauvert.github.io/</id><updated>2020-10-21T15:20:34+02:00</updated><entry><title>R with Snakemake: a few hurdles to overcome</title><link href="https://cpauvert.github.io/r-with-snakemake-a-few-hurdles-to-overcome.html" rel="alternate"></link><published>2020-10-21T15:20:34+02:00</published><updated>2020-10-21T15:20:34+02:00</updated><author><name>Charlie Pauvert</name></author><id>tag:cpauvert.github.io,2020-10-21:/r-with-snakemake-a-few-hurdles-to-overcome.html</id><summary type="html">&lt;p&gt;Suggested solutions to issues I dealt with when wrapping R scripts for Snakemake.&lt;/p&gt;</summary><content type="html">&lt;p&gt;When working on the &lt;a href="https://cpauvert.github.io/legolize-dada2.html"&gt;wrappers for DADA2&lt;/a&gt;, I had to respect both the grammar of Python/Snakemake and R. Here are some of the hurdles I have encountered.&lt;/p&gt;
&lt;h2&gt;Keeping the log&lt;/h2&gt;
&lt;p&gt;Keeping track of the log is quite easy in Snakemake when the tools can run in the shell. Don&amp;rsquo;t mistake me, R scripts can also be run on the shell using &lt;code&gt;Rscript&lt;/code&gt; and &lt;a href="https://lachlandeer.github.io/snakemake-econ-r-tutorial/logging-output-and-errors.html"&gt;Deer and Langer&lt;/a&gt; showed that you can use the command &lt;code&gt;Rscript &amp;gt; {log}&lt;/code&gt; to correctly keep track of your script. However, when using wrappers you do not have access to this command because in the &lt;a href="https://snakemake.readthedocs.io/en/stable/snakefiles/writing_snakefiles.html#grammar"&gt;Snakemake grammar&lt;/a&gt; instead of the &lt;code&gt;script:&lt;/code&gt; word you have the &lt;code&gt;wrapper:&lt;/code&gt; word.&lt;/p&gt;
&lt;p&gt;I knew the &lt;code&gt;sink()&lt;/code&gt; R function to redirect the output of R commands to a file. But when trying to redirect both messages and errors to the file when testing my wrappers it failed. The following &lt;a href="https://stackoverflow.com/a/48173272"&gt;post&lt;/a&gt; on stackoverflow provided the solution, which in short needs two invocations of &lt;code&gt;sink()&lt;/code&gt; to be able to capture both messages. It is now included in the wrappers I wrote.&lt;/p&gt;
&lt;h2&gt;Passing parameters to R&lt;/h2&gt;
&lt;p&gt;Snakemake provide both reproducible and customizable workflows. But providing parameters to R wrappers was harder than I thought. Looking at others R wrappers I saw two approaches. Either be fully explicit (and redundant) by copying all the R arguments of the needed functions into the Snakemake &lt;code&gt;params:&lt;/code&gt; word. Or be transparent and pass arguments in a character string that would be further interpreted with the R functions &lt;code&gt;parse()&lt;/code&gt; and &lt;code&gt;eval()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I wanted something more flexible and decided to rely on the R function &lt;code&gt;do.call()&lt;/code&gt; which enables the execution of a function based on arguments provided as named list (see 6.2.4 from &lt;a href="https://adv-r.hadley.nz/functions.html#function-fundamentals"&gt;Hadley&amp;rsquo;s Advanced R&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Using such structure, I could pass a Python dictionary to Snakemake &lt;code&gt;params:&lt;/code&gt; that would then be interpreted as a named lists in R. For instance:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="n"&gt;dada2_filter_trim_pe&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# [...]&lt;/span&gt;
    &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;maxEE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;truncLen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;240&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="c1"&gt;# [...]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Snakemake convert the Python dictionary into a named list which can be directly used for the R function (here &lt;code&gt;dada2::filterAndTrim()&lt;/code&gt;). Such named list if part of the larger &lt;code&gt;snakemake&lt;/code&gt; S4 object that we can access in R (more info on &lt;a href="https://snakemake.readthedocs.io/en/stable/snakefiles/rules.html#external-scripts"&gt;Snakemake docs&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;However, you cannot concatenate the lists provided (&lt;code&gt;snakemake@input&lt;/code&gt;, &lt;code&gt;snakemake@output&lt;/code&gt; and &lt;code&gt;snakemake@params&lt;/code&gt;) and expect &lt;code&gt;do.call()&lt;/code&gt; to do all the work. No, because Snakemake passes the &lt;code&gt;input:&lt;/code&gt; as unnumbered list &lt;strong&gt;and&lt;/strong&gt; as named list. So for input and output slots I could not do directly &lt;code&gt;do.call(filterAndTrim, snakemake@input)&lt;/code&gt;. Instead, I needed to prepare the arguments as follow:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;fwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;fwd&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
        &lt;span class="n"&gt;rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;rev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
        &lt;span class="n"&gt;filt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
        &lt;span class="n"&gt;filt.rev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;filt_rev&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt;
        &lt;span class="n"&gt;multithread&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;snakemake&lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="n"&gt;threads&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Most of the submitted Snakemake wrappers can now accept Python dictionaries to customize the underlying DADA2 R functions.&lt;/p&gt;
&lt;p&gt;These wrappers are currently under reviews by the team of the Snakemake wrappers repository. Meanwhile I try to design a DADA2 meta-wrapper to be able to nicely assemble these &lt;em&gt;bricks&lt;/em&gt;.&lt;/p&gt;</content><category term="Snakemake"></category></entry><entry><title>LEGOlize DADA2: getting DADA2 into Snakemake</title><link href="https://cpauvert.github.io/legolize-dada2.html" rel="alternate"></link><published>2020-10-08T12:27:00+02:00</published><updated>2020-10-09T10:39:00+02:00</updated><author><name>Charlie Pauvert</name></author><id>tag:cpauvert.github.io,2020-10-08:/legolize-dada2.html</id><summary type="html">&lt;p&gt;A (WIP) contribution project to rely on the modularity of Snakemake wrappers to propose a flexible pipeline for processing metabarcoding data.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I finally have the time to properly use the workflow management &lt;a href="https://github.com/snakemake/snakemake"&gt;Snakemake&lt;/a&gt; which is great because so many recent developments happened since I&amp;rsquo;ve heard of this tool during my master degree. The authors and contributors of Snakemake actually published recently a &lt;a href="https://doi.org/10.5281/zenodo.4067137"&gt;preprint&lt;/a&gt; highlighting such features.&lt;/p&gt;
&lt;p&gt;Among these features, one could be compared to LEGO&amp;reg; bricks: Snakemake &lt;em&gt;wrappers&lt;/em&gt;.  They are dedicated Snakemake rule that allow to plug &amp;ndash; much like bricks &amp;ndash; common tools to perform your analysis. These wrappers should pass automatic tests prior to their integration in the repository which safeguard against typos during development that hinders your workflow.&lt;/p&gt;
&lt;p&gt;Bricks can even be assembled in dedicated sets, which in the case of Snakemake means that wrappers can be combined to design &lt;em&gt;meta-wrapper&lt;/em&gt; where a common analysis workflow can be crafted using a selection of wrappers. This convenient idea enables the user to finely tune the level of modularity wished during the design of its Snakemake workflow: from custom rules, wrappers to meta-wrappers&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Snakemake use is rising and there was even recently a &lt;a href="https://doi.org/10.1101/2020.05.17.095679"&gt;preprint&lt;/a&gt; for a &lt;a href="https://benjjneb.github.io/dada2/"&gt;DADA2&lt;/a&gt; workflow with Snakemake. I was really excited for this huge contribution that, in my opinion, filled a gap. However, I realized that some steps were not parts of my personal workflow (such as the taxonomy) and that instead of this one well running Snakemake workflow &amp;ndash; huge LEGO set &amp;ndash;, I&amp;rsquo;d rather choose from several DADA2 wrappers &amp;ndash; piles of bricks &amp;ndash; to build a more flexible workflow.&lt;/p&gt;
&lt;p&gt;It all started when I realised that there were no DADA2 wrappers and even few metabarcoding related wrappers proposed in the repository.&lt;br&gt;
Last week, I then started writing my first wrappers by mimicking previous R wrappers listed in the &lt;a href="https://snakemake-wrappers.readthedocs.io/en/stable/index.html"&gt;repository&lt;/a&gt;. I tried to design toy examples to test the wrappers and I even manage to propose a few pull requests on the &lt;a href="https://github.com/snakemake/snakemake-wrappers/pulls"&gt;Github repository&lt;/a&gt;. However, I realize after going over the corrections proposed by the reviewer that I needed to carefully think ahead my wrapper and their articulations. Indeed, I first proposed wrappers using paired-end reads only which is not truly flexible. Hence some of my wrappers contained duplicated lines of code to cope with the orientation which violates the &lt;em&gt;don&amp;rsquo;t repeat yourself&lt;/em&gt; &lt;a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;rule&lt;/a&gt;.
Even worse, it sometimes adds complexity to steps that could be processed unbeknownst of the reads orientation. &lt;/p&gt;
&lt;p&gt;Therefore, I put my pull request on a draft status and will go back to writing properly. I already put on paper the dependency of wrappers to read orientation in order to optimize this workflow. I hope to propose soon these DADA2 wrappers and eventually a DADA2 meta-wrappers as well.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;Check the &lt;a href="https://snakemake.readthedocs.io/en/stable/snakefiles/modularization.html"&gt;documentation&lt;/a&gt; for more details on modularisation with Snakemake.&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="Snakemake"></category></entry></feed>